

We see machines may learn about 'self' with relative ease, if we limit our
expectations perhaps a bit. Self is what we define it to be. Reality is what we
define it to be. We are gods in our own universe and you, you alone can give it
meaning.




Since I believe everyone has flaws- and forgiveness to be a important quality -
so is no hacker infallible. Just read the [hacker manifesto] [] and learn what
can go wrong. Be warned.

But in this case, all it really does, is request for errors or contributions and
improvements to be made. Much like writing and coding together under version
control. So lets go: you might be good at coding certain things, let your
inspiration go. Someone will surely will help the prose, if the idea is great.

> A book is a set of written, printed, illustrated, or blank sheets, made of ink,
paper, parchment, or other materials, usually fastened together to hinge at one
side. A single sheet within a book is called a leaf, and each side of a leaf is
called a page. A set of text-filled or illustrated pages produced in electronic
format is known as an electronic book (e-book).

class Book

      instance = self


    read = () -> console.log "Reading..."

But not everything you read is actually seen:

    read()

And writing is not the same as speaking.

    write = (args...) -> console.log

 We must first learn how to speak.

    try
      say = require 'say'

    catch ourMistakes


> Speech and spoken words have always played a big role in the individual and
collective lives of the people. Wars have been won, blood has been shed, men
have sacrificed their lives, and peace agreements have been made because of the
magical words of a few who knew how to give life to their words. And this is one
thing that hasn't changed even with the development of various technologies. We
are yet to see something as powerful as speech that influences the minds and
thoughts of the whole mankind.
> [answers.com - the importance of speech] [01]

When you write an academic paper, it is common courtesy to acknowledge your
sources. There are various ways of doing this, and here we give you one system.
<http://folk.uio.no/hhasselg/Metode/references.htm>


> In the beginning was the Word, and the Word was with God, and the Word was
> God. The same was in the beginning with God. All things were made by him
> (John 1:1-3)

    say.speak "Alex", "No it was actually John who said that."

[01]: http://wiki.answers.com/Q/What_is_the_importance_of_speech


The idea of hiding or making private the inner workings is preference.
Especially since by default CoffeeScript wraps the compiled code inside itâ€™s own
IIFE (closure) allowing you to define classes without worry that it might be
accessible from outside the file. In this example, note that I am using the
idiomatic module export feature to emphasize the publicly accessible portion of
the module.

Further explanation on [exporting to the global namespace] [01].
[Source: http://coffeescriptcookbook.com/chapters/design_patterns/singleton] [02]

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula
eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient
montes, nascetur ridiculus mus.

[01]: http://stackoverflow.com/questions/4214731/coffeescript-global-variables
[02]: http://coffeescriptcookbook.com/chapters/design_patterns/singleton

Create a private class that we can initialize however defined inside the wrapper scope.

    class ProtectedClass

      constructor: (@message) ->
      echo: -> @message

You can add statements inside the class definition which helps establish private
scope (due to closures) instance is defined as null to force correct scope. The
`book` is a class that naturally, since we assume to operate from and in this
file (a node.js module although JS does not have to be node.js of course, it can
be anything else but here it is required now).

    class Book

      instance = null

This is a static method used to either retrieve the instance or create a new one.

      @get: (message) -> instance ?= new ProtectedClass(message)


Export Singleton as a module

      root.Book = Book




## Chapter I

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula
eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient
montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque
eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo,
fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut,
imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium.

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula
eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient
montes, nascetur ridiculus mus.

```coffeescript

    chapter1 = ->


```
